{"version":3,"sources":["logo.svg","serviceWorker.js","Component/Lists.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Info","props","className","Card","style","width","Header","fontSize","post","name","ListGroup","variant","Item","age","city","UserListInfo","user","filter","User","id","Userid","map","list","key","ListOfUsers","Accordion","Toggle","as","Button","eventKey","eachUser","Collapse","Body","profession","Lists","state","users","showUsers","showid","e","console","log","this","setState","height","onClick","handler","React","Component","ReactDOM","render","document","getElementById"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,gMCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2ECXN,SAASC,EAAKC,GACV,OAAQ,oCACJ,yBAAKC,UAAU,QACX,6BACA,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UAClB,kBAACF,EAAA,EAAKG,OAAN,CAAaF,MAAO,CAAEG,SAAU,SAAU,2BAAIN,EAAMO,KAAKC,OACzD,kBAACC,EAAA,EAAD,CAAWC,QAAQ,SACf,kBAACD,EAAA,EAAUE,KAAX,eAAwBX,EAAMO,KAAKC,MACnC,kBAACC,EAAA,EAAUE,KAAX,cAAuBX,EAAMO,KAAKK,KAClC,kBAACH,EAAA,EAAUE,KAAX,eAAwBX,EAAMO,KAAKM,UAOvD,SAASC,EAAad,GAClB,OAAQ,oCAEAA,EAAMe,KAAKC,QAAO,SAACC,GAAD,OAAUA,EAAKC,IAAMlB,EAAMmB,UAAQC,KAAI,SAACC,GAAD,OAAU,kBAACtB,EAAD,CAAMuB,IAAKD,EAAKH,GAAIX,KAAMc,QAKzG,SAASE,EAAYvB,GACjB,OACI,kBAACwB,EAAA,EAAD,KACI,kBAACtB,EAAA,EAAD,CAAMD,UAAU,YACZ,kBAACC,EAAA,EAAKG,OAAN,KACI,kBAACmB,EAAA,EAAUC,OAAX,CAAkBC,GAAIC,IAAQjB,QAAQ,OAAOkB,SAAS,IAAIzB,MAAO,CAAEG,SAAU,SACxEN,EAAM6B,SAASrB,OAGxB,kBAACgB,EAAA,EAAUM,SAAX,CAAoBF,SAAS,KACzB,kBAAC1B,EAAA,EAAK6B,KAAN,oBAAwB/B,EAAM6B,SAASG,e,IA0C5CC,E,kDAlCX,WAAYjC,GAAQ,IAAD,8BACf,cAAMA,IACDkC,MAAQ,CACTC,MAAO,CACH,CAAEjB,GAAI,EAAGV,KAAM,QAASI,IAAK,GAAIC,KAAM,SAAUmB,WAAY,cAC7D,CAAEd,GAAI,EAAGV,KAAM,SAAUI,IAAK,GAAIC,KAAM,WAAYmB,WAAY,eAChE,CAAEd,GAAI,EAAGV,KAAM,OAAQI,IAAK,GAAIC,KAAM,YAAamB,WAAY,cAChEI,WAAW,EAAOC,OAAQ,IAPlB,E,oDAWXC,GACJC,QAAQC,IAAIF,GAEZG,KAAKC,SAAS,CAAEN,WAAYK,KAAKP,MAAME,UAAWC,OAAQC,M,+BAGpD,IAAD,OACDH,EAAQ,KAQZ,OAPIM,KAAKP,MAAME,YACXD,EACI,6BACI,kBAACrB,EAAD,CAAcC,KAAM0B,KAAKP,MAAMC,MAAOhB,OAAQsB,KAAKP,MAAMG,WAI7D,oCACHI,KAAKP,MAAMC,MAAMf,KAAI,SAACL,GAAD,OAAU,yBAAKd,UAAU,iBAAgB,kBAACsB,EAAD,CAAaM,SAAUd,IAClF,kBAACY,EAAA,EAAD,CAAQxB,MAAO,CAAEwC,OAAQ,QAAUjC,QAAS,EAAKwB,MAAME,UAAY,iBAAmB,eAAgBQ,QAAS,SAACN,GAAD,OAAO,EAAKO,QAAQ9B,EAAKG,KAAKI,IAAKP,EAAKG,IAAI,4BAAK,EAAKgB,MAAME,UAAY,OAAS,+BACnMD,O,GA9BOW,IAAMC,W,MCtC1BC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.0aee6437.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport './List.css'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Card from 'react-bootstrap/Card'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\nimport Accordion from 'react-bootstrap/Accordion'\r\n\r\nfunction Info(props) {\r\n    return (<>\r\n        <div className='Info'>\r\n            <hr></hr>\r\n            <Card style={{ width: '18rem' }}>\r\n                <Card.Header style={{ fontSize: '30px' }}><b>{props.post.name}</b></Card.Header>\r\n                <ListGroup variant=\"flush\">\r\n                    <ListGroup.Item>Name : {props.post.name}</ListGroup.Item>\r\n                    <ListGroup.Item>Age : {props.post.age}</ListGroup.Item>\r\n                    <ListGroup.Item>City : {props.post.city}</ListGroup.Item>\r\n                </ListGroup>\r\n            </Card>\r\n        </div>\r\n    </>)\r\n}\r\n\r\nfunction UserListInfo(props) {\r\n    return (<>\r\n        {\r\n            props.user.filter((User) => User.id == props.Userid).map((list) => <Info key={list.id} post={list} />)\r\n        }\r\n    </>)\r\n}\r\n//In output Click on UserName\r\nfunction ListOfUsers(props) {\r\n    return (\r\n        <Accordion >\r\n            <Card className='UserCard'>\r\n                <Card.Header>\r\n                    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\" style={{ fontSize: '30px' }}>\r\n                        {props.eachUser.name}\r\n                    </Accordion.Toggle>\r\n                </Card.Header>\r\n                <Accordion.Collapse eventKey=\"0\">\r\n                    <Card.Body>Hey, I am a {props.eachUser.profession}</Card.Body>\r\n                </Accordion.Collapse>\r\n            </Card>\r\n        </Accordion>\r\n    )\r\n}\r\n\r\nclass Lists extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            users: [\r\n                { id: 1, name: 'Smeet', age: 21, city: 'Rajkot', profession: 'Programmer' },\r\n                { id: 2, name: 'Dhaval', age: 22, city: 'Junagadh', profession: 'Businessmen' },\r\n                { id: 3, name: 'Abhi', age: 23, city: 'Manavadar', profession: 'Cricketer' },\r\n            ], showUsers: false, showid: ''\r\n        }\r\n    }\r\n\r\n    handler(e) {\r\n        console.log(e)\r\n\r\n        this.setState({ showUsers: !this.state.showUsers, showid: e });\r\n    }\r\n\r\n    render() {\r\n        let users = null;\r\n        if (this.state.showUsers) {\r\n            users = (\r\n                <div>\r\n                    <UserListInfo user={this.state.users} Userid={this.state.showid} />\r\n                </div>\r\n            )\r\n        }\r\n        return (<>\r\n            {this.state.users.map((user) => <div className='UserAndButton'><ListOfUsers eachUser={user} ></ListOfUsers>\r\n                <Button style={{ height: '70px' }} variant={this.state.showUsers ? 'outline-danger' : 'outline-info'} onClick={(e) => this.handler(user.id)} key={user.id}><h5>{this.state.showUsers ? 'Hide' : 'Click here to See More'}</h5></Button></div>)}\r\n            {users}\r\n        </>);\r\n    }\r\n}\r\n\r\nexport default Lists;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport List from './Component/Lists'\r\nimport Conflict from './Component/Conflict'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n \r\n\r\nReactDOM.render(<List />, document.getElementById('root'));\r\n"],"sourceRoot":""}