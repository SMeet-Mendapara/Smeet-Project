{"version":3,"sources":["logo.svg","serviceWorker.js","Component/HookUseState.js","index.js","Component/HookuseState.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","DisplayCounter","useState","counter","Handler","Alert","variant","className","Style","mainDiv","firstDiv","Button","onClick","resetCounter","ResetHandler","CounterDiv","ReactDOM","render","document","getElementById"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,2KCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yDC+BSC,EAzCQ,WAAO,IAAD,EAEEC,mBAAS,GAFX,mBAElBC,EAFkB,KAETC,EAFS,KAgBzB,OAAID,EAAU,EAEN,kBAACE,EAAA,EAAD,CAAOC,QAAQ,UAAf,wDAMA,oCAEJ,yBAAKC,UAAWC,IAAMC,SAClB,yBAAKF,UAAWC,IAAME,UAElB,kBAACC,EAAA,EAAD,CAAQL,QAAQ,UAAUM,QAAS,WAxB3CR,EAAQD,EAAU,KAwBkD,0CAC5D,kBAACQ,EAAA,EAAD,CAAQL,QAAQ,SAASM,QAAS,WAtB1CR,EAAQD,EAAU,KAsBiD,wCAA3D,KACA,kBAACQ,EAAA,EAAD,CAAQL,QAAQ,UAAUM,QAAS,kBArB1B,WAEjB,IAAMC,EAAY,2BAAQV,GAAR,IAAiBA,QAAS,IAC5CC,EAAQS,EAAaV,SAkB4BW,KAAgB,uCAE7D,yBAAKP,UAAWC,IAAMO,YAClB,yCAAeZ,OClC/Ba,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U,kBCP1DzB,EAAOC,QAAU,CAAC,SAAW,+BAA+B,WAAa,iCAAiC,QAAU,iC","file":"static/js/main.081ca6c4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport Style from './HookuseState.module.css'\r\n\r\n\r\n\r\n\r\nconst DisplayCounter = () => {\r\n\r\n    const [counter, Handler] = useState(0)\r\n\r\n    const IncreaseHandler = () => {\r\n        Handler(counter + 1)\r\n    }\r\n    const DecreaseHandler = () => {\r\n        Handler(counter - 1)\r\n    }\r\n    const ResetHandler = () => {\r\n\r\n        const resetCounter = { ...counter, counter: 0 }\r\n        Handler(resetCounter.counter)\r\n    }\r\n \r\n    if (counter < 0) {\r\n        return (\r\n            <Alert variant='danger' >\r\n               Sorry, You Can not get negative value in Counter !!!\r\n            </Alert>\r\n        )\r\n    }\r\n\r\n    return (<>\r\n   \r\n        <div className={Style.mainDiv}>\r\n            <div className={Style.firstDiv}>\r\n            \r\n                <Button variant=\"success\" onClick={() => IncreaseHandler()}><h5>Increase </h5></Button>\r\n                <Button variant=\"danger\" onClick={() => DecreaseHandler()}><h5>Decrease</h5> </Button>\r\n                <Button variant=\"warning\" onClick={() => ResetHandler()}><h5>Reset</h5></Button>\r\n            </div>\r\n            <div className={Style.CounterDiv}>\r\n                <h2>Counter : {counter}</h2>\r\n            </div>\r\n\r\n        </div>\r\n    </>)\r\n}\r\n\r\nexport default DisplayCounter\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport DisplayCounter from './Component/HookUseState'\r\n\r\nReactDOM.render(<DisplayCounter/>,document.getElementById('root'));\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"firstDiv\":\"HookuseState_firstDiv__1pJBI\",\"CounterDiv\":\"HookuseState_CounterDiv__1hKkN\",\"mainDiv\":\"HookuseState_mainDiv__2GYVd\"};"],"sourceRoot":""}