{"version":3,"sources":["logo.svg","Forms/Form.js","Forms/Browser.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchForm","useState","value","valueHandler","history","useHistory","Form","inline","onSubmit","e","preventDefault","push","HandleSubmit","FormControl","type","placeholder","className","onChange","target","OnChangeHandler","Button","Links","Nav","variant","defaultActiveKey","Item","Link","exact","to","path","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,4JC0B5BC,EArBI,WAAO,IAAD,EAESC,mBAAS,IAFlB,mBAEdC,EAFc,KAEPC,EAFO,KAGjBC,EAAUC,cAUd,OAAQ,oCACJ,kBAACC,EAAA,EAAD,CAAMC,QAAM,EAACC,SAAU,SAACC,GAAD,OALN,SAACA,GAClBA,EAAEC,iBACFN,EAAQO,KAAR,WAAiBT,IAGaU,CAAaH,KACvC,kBAACI,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAASC,UAAU,WAAWC,SAAU,SAACR,GAAD,OAV7D,SAACA,GACrBN,EAAaM,EAAES,OAAOhB,OASkEiB,CAAgBV,IAAIP,MAAOA,IAC/G,kBAACkB,EAAA,EAAD,CAAQN,KAAK,UAAb,a,gBCcGO,MA/Bf,WACI,OAAQ,oCACJ,kBAACC,EAAA,EAAD,CAAKC,QAAQ,OAAOC,iBAAiB,SACjC,kBAACF,EAAA,EAAIG,KAAL,KACI,kBAACH,EAAA,EAAII,KAAL,KAAW,kBAAC,IAAD,CAASC,OAAK,EAACC,GAAG,KAAlB,UAEf,kBAACN,EAAA,EAAIG,KAAL,KACI,kBAACH,EAAA,EAAII,KAAL,KAAW,kBAAC,IAAD,CAASE,GAAG,YAAZ,aAEf,kBAACN,EAAA,EAAIG,KAAL,KACI,kBAACH,EAAA,EAAII,KAAL,KAAU,kBAAC,IAAD,CAASE,GAAG,aAAZ,cAEd,kBAACN,EAAA,EAAIG,KAAL,KACI,kBAACH,EAAA,EAAII,KAAL,KAAW,kBAAC,IAAD,CAASE,GAAG,aAAZ,cAEf,kBAACN,EAAA,EAAIG,KAAL,KACI,kBAACH,EAAA,EAAII,KAAL,KAAW,kBAAC,IAAD,CAASE,GAAG,YAAZ,cAInB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOD,OAAK,EAACE,KAAK,KAAI,yBAAKb,UAAU,kBAAf,SACtB,kBAAC,IAAD,CAAOa,KAAK,YAAW,yBAAKb,UAAU,kBAAf,YACvB,kBAAC,IAAD,CAAOa,KAAK,aAAY,yBAAKb,UAAU,kBAAf,aACxB,kBAAC,IAAD,CAAOa,KAAK,aAAY,yBAAKb,UAAU,kBAAf,aACxB,kBAAC,IAAD,CAAOa,KAAK,YAAW,yBAAKb,UAAU,kBAAf,YACvB,kBAAC,IAAD,CAAOa,KAAK,KAAI,yBAAKb,UAAU,kBAAf,iBCdbc,MATf,WACE,OACC,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a8b0047a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Form, FormControl, Button } from 'react-bootstrap'\r\n\r\n\r\nconst SearchForm = () => {\r\n\r\n    const [value, valueHandler] = useState('')\r\n    let history = useHistory()\r\n\r\n    const OnChangeHandler = (e) => {\r\n        valueHandler(e.target.value);\r\n    }\r\n\r\n    const HandleSubmit = (e) => {\r\n        e.preventDefault();\r\n        history.push(`/${value}`);\r\n    }\r\n    return (<>\r\n        <Form inline onSubmit={(e) => HandleSubmit(e)} >\r\n            <FormControl type=\"text\" placeholder=\"Search\" className=\" mr-sm-2\" onChange={(e) => OnChangeHandler(e)} value={value} />\r\n            <Button type=\"submit\">Search</Button>\r\n        </Form>\r\n    </>);\r\n}\r\n\r\nexport default SearchForm\r\n","import React from 'react'\r\nimport { NavLink, Switch, Route } from 'react-router-dom'\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\nfunction Links() {\r\n    return (<>\r\n        <Nav variant=\"tabs\" defaultActiveKey=\"/home\">\r\n            <Nav.Item>\r\n                <Nav.Link ><NavLink exact to='/'>Home</NavLink></Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item >\r\n                <Nav.Link ><NavLink to='/gallary'>Gallary</NavLink></Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n                <Nav.Link><NavLink to='/services'>Services</NavLink></Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n                <Nav.Link ><NavLink to='/features'>Features</NavLink></Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n                <Nav.Link ><NavLink to='/pricing'>Pricing</NavLink></Nav.Link>\r\n            </Nav.Item>\r\n        </Nav>\r\n\r\n        <Switch>\r\n            <Route exact path='/'><div className='text-center h3'>Home</div></Route>\r\n            <Route path='/gallary'><div className='text-center h3'>Gallary</div></Route>\r\n            <Route path='/services'><div className='text-center h3'>Services</div></Route>\r\n            <Route path='/features'><div className='text-center h3'>Features</div></Route>\r\n            <Route path='/pricing'><div className='text-center h3'>Pricing</div></Route>\r\n            <Route path='*'><div className='text-center h3'>Not Found</div></Route>\r\n        </Switch>\r\n    </>)\r\n}\r\n\r\nexport default Links\r\n\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Form from './Forms/Form'\r\nimport Links from './Forms/Browser'\r\n\r\n\r\nfunction App() {\r\n  return (\r\n   <div>\r\n     <Links/>\r\n     <Form/>\r\n   </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}