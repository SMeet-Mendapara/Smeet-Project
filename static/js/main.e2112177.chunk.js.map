{"version":3,"sources":["logo.svg","serviceWorker.js","Component/FormikRegistration.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","FormikRegistraion","useState","Data","setData","initialValues","firstName","lastName","email","password","confirmPassword","gender","department","acceptTandC","validationSchema","Yup","shape","required","min","oneOf","onSubmit","values","errors","touched","className","name","type","component","value","as","Button","variant","Card","border","Header","ListGroup","Item","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e2112177.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from 'react';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Button, Card, ListGroup } from 'react-bootstrap'\r\n\r\n\r\nconst FormikRegistraion = () => {\r\n\r\n    const [Data, setData] = useState(null)\r\n\r\n    const SubmitData = (values) => {\r\n        setData(values)\r\n    };\r\n\r\n    return (<>\r\n        <Formik\r\n            initialValues={{\r\n                firstName: \"\",\r\n                lastName: \"\",\r\n                email: \"\",\r\n                password: \"\",\r\n                confirmPassword: \"\",\r\n                gender: \"\",\r\n                department: \"\",\r\n                acceptTandC: false\r\n\r\n            }}\r\n\r\n            validationSchema={Yup.object().shape({\r\n                firstName: Yup.string().required(\"First Name is required\"),\r\n                lastName: Yup.string().required(\"Last Name is required\"),\r\n                email: Yup.string().email('email is invalid').required('Email is required'),\r\n                password: Yup.string().min(6, 'Minimum 6 character required').required('Password is required'),\r\n                confirmPassword: Yup.string().oneOf([Yup.ref('password')], 'Passwords must match').required('Confirm Password is required'),\r\n                gender: Yup.string().required('Select any one'),\r\n                department: Yup.string().required('department is required'),\r\n                acceptTandC: Yup.bool().oneOf([true], \"You must accept T&C\")\r\n            })}\r\n\r\n            onSubmit={SubmitData}\r\n        >\r\n\r\n            {({ errors, touched }) => (\r\n                <Form className='col-6 offset-3 bg-dark rounded'>\r\n                    <div className=\"form-group pt-3\">\r\n                        <div className=\"form-group col\">\r\n                            <label className='text-white'>First Name : </label>\r\n                            <Field name=\"firstName\" type=\"text\" className={\"form-control \" + (errors.firstName && touched.firstName ? \"is-invalid\" : \"\")} />\r\n                            <ErrorMessage name=\"firstName\" component=\"div\" className=\"invalid-feedback\" />\r\n                        </div>\r\n                        <div className=\"form-group col\">\r\n                            <label className='text-white'>Last Name : </label>\r\n                            <Field name=\"lastName\" type=\"text\" className={\"form-control \" + (errors.lastName && touched.lastName ? \"is-invalid\" : \"\")} />\r\n                            <ErrorMessage name=\"lastName\" component=\"div\" className=\"invalid-feedback\" />\r\n                        </div>\r\n                        <div className=\"form-group col\">\r\n                            <label className='text-white'>Email : </label>\r\n                            <Field name=\"email\" type=\"email\" className={\"form-control \" + (errors.email && touched.email ? \"is-invalid\" : \"\")} />\r\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\r\n                        </div>\r\n                        <div className=\"form-group col\">\r\n                            <label className='text-white'>Password : </label>\r\n                            <Field name=\"password\" type=\"password\" className={\"form-control \" + (errors.password && touched.password ? \"is-invalid\" : \"\")} />\r\n                            <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\r\n                        </div>\r\n                        <div className=\"form-group col\">\r\n                            <label className='text-white'>Confirm Paasword : </label>\r\n                            <Field name=\"confirmPassword\" type=\"password\" className={\"form-control \" + (errors.confirmPassword && touched.confirmPassword ? \"is-invalid\" : \"\")} />\r\n                            <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"invalid-feedback\" />\r\n                        </div>\r\n                        <div className=\"form-group col\">\r\n                            <label className='text-white'>Gender : </label>\r\n                            <Field name=\"gender\" type=\"radio\" value=\"Male\" className={\"ml-5 mr-2 \" + (errors.gender && touched.gender ? \"is-invalid\" : \"\")} />\r\n                            <label className='text-white'>Male</label>\r\n                            <Field name=\"gender\" type=\"radio\" value=\"Female\" className={\"ml-5 mr-2 \" + (errors.gender && touched.gender ? \"is-invalid\" : \"\")} />\r\n                            <label className='text-white'>Female</label>\r\n                            <ErrorMessage name=\"gender\" component=\"div\" className=\"invalid-feedback\" />\r\n                        </div>\r\n                        <div className='form-group col'>\r\n                            <label className='text-white'>Department :</label>\r\n                            <Field as=\"select\" name=\"department\" className={\"ml-5 mr-2 \" + (errors.gender && touched.gender ? \"is-invalid\" : \"\")}>\r\n                                <option name=\"department\" >Select any one</option>\r\n                                <option name=\"department\" value=\"Computer\">Computer</option>\r\n                                <option name=\"department\" value=\"Civil\">Civil</option>\r\n                                <option name=\"department\" value=\"Mechenical\">Mechenical</option>\r\n                            </Field>\r\n                            <ErrorMessage name=\"department\" component=\"div\" className=\"invalid-feedback\" />\r\n                        </div>\r\n                        <div className='form-group col'>\r\n                            <Field name='acceptTandC' type='checkbox' className={\"mr-3 \" + (errors.acceptTandC && touched.acceptTandC ? 'is-invalid' : \"\")} />\r\n                            <label className='text-white'>Accept Terms & Conditions</label>\r\n                            <ErrorMessage name='acceptTandC' component='div' className='invalid-feedback' />\r\n                        </div>\r\n\r\n                        <div className=\"form-group col d-flex justify-content-end pb-3\">\r\n                            <Button variant=\"outline-success\" type=\"submit\" className='mr-2' >Submit</Button>\r\n                            <Button variant=\"outline-warning\" type=\"reset\"  >Reset</Button>\r\n                        </div>\r\n                    </div>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n\r\n        <div className='col-6 offset-3 border-warning'>\r\n            {\r\n                Data ?\r\n                    <Card border=\"primary\">\r\n                        <Card.Header><h5>Details</h5></Card.Header>\r\n                        <ListGroup variant=\"flush\">\r\n                            <ListGroup.Item>First Name : {Data.firstName}</ListGroup.Item>\r\n                            <ListGroup.Item>Last Name : {Data.lastName}</ListGroup.Item>\r\n                            <ListGroup.Item>Email : {Data.email}</ListGroup.Item>\r\n                            <ListGroup.Item>Password : {Data.password}</ListGroup.Item>\r\n                            <ListGroup.Item>Gender : {Data.gender}</ListGroup.Item>\r\n                            <ListGroup.Item>Department : {Data.department}</ListGroup.Item>\r\n                        </ListGroup>\r\n                    </Card>\r\n                    :\r\n                    null\r\n            }\r\n        </div>\r\n    </>)\r\n}\r\n\r\n\r\nexport default FormikRegistraion","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport FormikRegistraion from './Component/FormikRegistration'\r\n\r\nReactDOM.render(<FormikRegistraion />,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}