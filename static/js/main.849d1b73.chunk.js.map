{"version":3,"sources":["logo.svg","HOC/HOC.js","HOC/NeedyComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HocMain","WarrpedComponent","props","state","isLoading","setTimeout","setState","key","data","localStorage","setItem","getItem","removeItem","clear","this","load","save","remove","removeAll","Spinner","animation","variant","React","Component","Result","username","alert","Button","className","onClick","setLocalStorageItem","bind","GetLocalStorageClick","removeButton","removeAllButton","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,8KCsD5BC,MAjDf,SAAiBC,GACb,yDACI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAAEC,WAAW,GAFX,EADvB,gEAMyB,IAAD,OAChBC,YAAW,WACP,EAAKC,SAAS,CAAEF,WAAY,EAAKD,MAAMC,cACxC,OATX,2BAWSG,EAAKC,GACFD,GACAE,aAAaC,QAAQH,EAAKC,KAbtC,2BAgBSD,GACD,OAAIA,EACOE,aAAaE,QAAQJ,GAEzB,OApBf,6BAsBWA,GAECA,GACAE,aAAaG,WAAWL,KAzBpC,kCA6BQE,aAAaI,UA7BrB,+BAgCQ,OACI,6BACMC,KAAKX,MAAMC,UACT,kBAACH,EAAD,eACIc,KAAMD,KAAKC,KACXC,KAAMF,KAAKE,KACXC,OAAQH,KAAKG,OACbC,UAAWJ,KAAKI,WACZJ,KAAKZ,QANQ,kBAACiB,EAAA,EAAD,CAASC,UAAU,SAASC,QAAQ,iBAlC7E,GAAqBC,IAAMC,Y,OCgDhBC,G,MAFAxB,E,kDA7CX,WAAYE,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAAEsB,SAAU,IAFV,E,kEAMfX,KAAKZ,MAAMc,KAAK,WAAY,SAC5BF,KAAKR,SAAS,CAAEmB,SAAU,Y,6CAI1B,IAAMA,EAAWX,KAAKZ,MAAMa,KAAK,YAC7BU,GACAX,KAAKR,SAAS,CAAEmB,SAAUA,IAE9BC,MAAMD,K,qCASN,OANiBX,KAAKZ,MAAMa,KAAK,cAE7BD,KAAKR,SAAS,CAAEmB,SAAU,KAC1BX,KAAKZ,MAAMe,OAAO,YAClBS,MAAM,qBAEH,O,wCAGPZ,KAAKZ,MAAMgB,YACXJ,KAAKR,SAAS,CAAEmB,SAAU,KAC1BC,MAAM,sB,+BAIN,OACI,6BACI,uCAAaZ,KAAKX,MAAMsB,UAAc,6BACtC,kBAACE,EAAA,EAAD,CAAQC,UAAU,QAAQP,QAAQ,UAAUQ,QAASf,KAAKgB,oBAAoBC,KAAKjB,OAAnF,WACA,kBAACa,EAAA,EAAD,CAAQC,UAAU,QAAQP,QAAQ,UAAUQ,QAASf,KAAKkB,qBAAqBD,KAAKjB,OAApF,YACA,kBAACa,EAAA,EAAD,CAAQC,UAAU,QAAQP,QAAQ,UAAUQ,QAASf,KAAKmB,aAAaF,KAAKjB,OAA5E,cACA,kBAACa,EAAA,EAAD,CAAQC,UAAU,QAAQP,QAAQ,SAASQ,QAASf,KAAKoB,gBAAgBH,KAAKjB,OAA9E,mB,GAxCaQ,IAAMC,aCOpBY,MARf,WACE,OACE,yBAAKP,UAAU,OACf,kBAAC,EAAD,Q,MCIgBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.849d1b73.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport Spinner from 'react-bootstrap/Spinner'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\n\r\nfunction HocMain(WarrpedComponent) {\r\n    return class extends React.Component {\r\n        constructor(props) {\r\n            super(props)\r\n            this.state = { isLoading: false }\r\n        }\r\n\r\n        componentDidMount() {\r\n            setTimeout(() => {\r\n                this.setState({ isLoading: !this.state.isLoading })\r\n            }, 2000)\r\n        }\r\n        save(key, data) {\r\n            if (key) {\r\n                localStorage.setItem(key, data)\r\n            }\r\n        }\r\n        load(key) {\r\n            if (key) {\r\n                return localStorage.getItem(key)\r\n            }\r\n            return null\r\n        }\r\n        remove(key) {\r\n            debugger\r\n            if (key) {\r\n                localStorage.removeItem(key)\r\n            }\r\n        }\r\n        removeAll() {\r\n            localStorage.clear()\r\n        }\r\n        render() {\r\n            return (\r\n                <div>\r\n                    {!this.state.isLoading ? <Spinner animation=\"border\" variant=\"primary\" /> :\r\n                        <WarrpedComponent\r\n                            load={this.load}\r\n                            save={this.save}\r\n                            remove={this.remove}\r\n                            removeAll={this.removeAll}\r\n                            {...this.props}\r\n                        />}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default HocMain","import React, { useState } from 'react';\r\nimport HocMain from './HOC'\r\nimport Button from 'react-bootstrap/Button'\r\nimport './HOC.css'\r\n\r\n\r\nclass NeedyComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { username: '' }\r\n    }\r\n\r\n    setLocalStorageItem() {\r\n        this.props.save('username', 'Smeet')\r\n        this.setState({ username: 'Smeet' })\r\n    }\r\n    GetLocalStorageClick() {\r\n        debugger\r\n        const username = this.props.load('username')\r\n        if (username) {\r\n            this.setState({ username: username })\r\n        }\r\n        alert(username)\r\n    }\r\n    removeButton() {\r\n        const username = this.props.load('username')\r\n        if (username) {\r\n            this.setState({ username: '' })\r\n            this.props.remove(\"username\")\r\n            alert('Removed one Item')\r\n        }\r\n        return null\r\n    }\r\n    removeAllButton() {\r\n        this.props.removeAll()\r\n        this.setState({ username: '' })\r\n        alert('Remove All Items')\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Welcome {this.state.username}</h3><br></br>\r\n                <Button className='space' variant=\"primary\" onClick={this.setLocalStorageItem.bind(this)}>Set One</Button>\r\n                <Button className='space' variant=\"success\" onClick={this.GetLocalStorageClick.bind(this)}>Show One</Button>\r\n                <Button className='space' variant=\"warning\" onClick={this.removeButton.bind(this)}>Remove One</Button>\r\n                <Button className='space' variant=\"danger\" onClick={this.removeAllButton.bind(this)}>Remove All</Button>                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst Result = HocMain(NeedyComponent)\r\n\r\nexport default Result\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Result from '../src/HOC/NeedyComponent'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n    <Result/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}